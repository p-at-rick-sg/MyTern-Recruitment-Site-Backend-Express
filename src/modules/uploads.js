require('dotenv').config();
const {Storage} = require('@google-cloud/storage');
const fs = require('fs').promises;
const Fs = require('fs');
const path = require('path');

const uploadAssetToGCP = async (file, fileOutputName) => {
  console.log('uploading the file');
  try {
    const storage = new Storage();
    const bucket = storage.bucket(process.env.BUCKET_NAME);
    const result = await bucket.upload(file, {
      destination: fileOutputName,
    });
    console.log('file upload result is: ', result);
    return result;
  } catch (err) {
    console.error(err.message);
  }
};

const downloadAssetFromGCP = async () => {
  const storage = new Storage();
  const userId = 'placeholder-user-id';
  try {
    const destFileName = `${userId}resume.pdf`;
    const fileName = 'a4fb5f0ba9e4e2677d9b2dc4a5aac286.pdf';
    const resumeBucket = storage.bucket(process.env.BUCKET_NAME);
    const options = {
      destination: `./resumes/${destFileName}`,
    };
    const file = await resumeBucket.file(fileName).download(options);
    console.log(`gs://${resumeBucket}/${fileName} downloaded to ${destFileName}.`);
  } catch (err) {
    console.error('downloaed from GCP error: ', err);
  }
};

const deleteLocalAsset = async filePath => {
  try {
    result = await fs.unlink(filePath);
    console.log(`File ${filePath} has been deleted.`);
    return result;
  } catch (err) {
    console.error(err);
  }
};

const deleteFromGCP = async filename => {
  const storage = new Storage();
  const resumeBucket = storage.bucket(process.env.BUCKET_NAME);
  const generationMatchPrecondition = 0;
  const deleteOptions = {
    ifGenerationMatch: generationMatchPrecondition,
  };
  try {
    await resumeBucket.file(filename).delete(deleteOptions);
  } catch (err) {
    console.error('Delete from GCP failed with error ', err);
    return 1;
  }
};

const uploadAsset = async (req, res) => {
  try {
    const fileSuffix = req.file.originalname.split('.').pop();
    const fileName = req.file.filename + '.' + fileSuffix;
    const result = await uploadAssetToGCP(req.file.path, fileName); //using the random names generated by Multer
    if (result[0].id) {
      //compose the full url
      const imageURI = process.env.IMAGE_BASE_URI + result[0].id;
      const filePath = path.resolve('uploads/', req.file.filename);
      //remove the image from the local storage
      //   deleteLocalAsset(filePath); don't want to do this just yet!
      //add some reference to the file to the db - selfLink and name should suffice
      console.log(fileName);
      const oldName = path.join(__dirname, `../../uploads/${req.file.filename}`);
      const newName = path.join(__dirname, `../../uploads/${fileName}`);
      Fs.renameSync(oldName, newName);
      return res.status(200).json({
        status: 'ok',
        msg: 'file upload successful',
        fileName: fileName,
      });
    } else {
      return res.status(400).json({status: 'error', msg: 'file upload failed'});
    }
  } catch (err) {
    console.error('Error: ', err);
    return res.status(400).json({status: 'error', msg: 'file upload failed with error'});
  }
};

module.exports = {uploadAsset, downloadAssetFromGCP};
